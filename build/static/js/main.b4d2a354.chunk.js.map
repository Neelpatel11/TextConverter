{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","aboute","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","class","background","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","words","split","uppercaseword","forEach","element","charAt","slice","join","document","getElementById","select","navigator","clipboard","writeText","length","defaultProps","Alert","alert","role","word","lower","capitalize","msg","About","backgroundColor","myStyle","setmyStyle","btntext","setbtntext","border","App","setMode","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b4d2a354.chunk.js","sourcesContent":["import React from 'react'\r\nimport  PropTypes  from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/ \">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.aboute}</Link>\r\n        </li>\r\n      </ul>\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\"  htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes ={\r\n    title: PropTypes.string.isRequired,\r\n    aboute : PropTypes.string.isRequired\r\n}\r\n  \r\nNavbar.defaultProps ={\r\n    title: 'Set title here',\r\n    aboute : 'Aboute Text Here'\r\n};\r\n  ","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = () =>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Uppercase!\" , \"success\");\r\n    }\r\n    const Copyall = () =>{\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied\" , \"success\");\r\n    }\r\n    const handleLoClick = () =>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Lowercase!\" , \"success\");\r\n    }\r\n    const Extraspace = () =>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra Spaces Removed \" , \"success\");\r\n    }\r\n    const handleOnChange = (event) =>{\r\n        setText(event.target.value);\r\n    }\r\n    const clearall = (event) =>{\r\n        let newText = '';\r\n        setText(newText)\r\n        props.showAlert(\"Clear !\" , \"success\");\r\n    }\r\n    const capitalFirstLetter = ()=>{\r\n        let words = text.split(\" \")\r\n       let uppercaseword = ''\r\n        words.forEach(element => {\r\n           uppercaseword += element.charAt(0).toUpperCase() + element.slice(1) + \" \"\r\n        });\r\n        setText(uppercaseword)\r\n        props.showAlert(\"Converted to Capitalize!\" , \"success\");\r\n    }\r\n\r\n\r\n    const [text, setText] = useState('Enter text here')\r\n    // text = \"loll\" wrong way \r\n    // setText(\"loll\"); correct way way \r\n    return (\r\n        <>\r\n    <div className=\"container\" style={{color :props.mode==='dark'?'white':'black'}}>\r\n        <h1>{props.heading}</h1>\r\n          <div class=\"mb-3\">\r\n           <textarea class=\"form-control\" style={{background :props.mode==='dark'?'grey':'white' , color :props.mode==='dark'?'white':'black'}} value={text} onChange  = {handleOnChange}  id=\"myBox\" rows=\"8\"></textarea>\r\n       </div>\r\n       <button className=\"btn btn-primary mx-2 my-2\" onClick={handleUpClick}>Convert To Upercase</button> \r\n       <button className=\"btn btn-primary mx-2 my-2\" onClick={handleLoClick}>Convert To Lowercase</button>\r\n       <button className=\"btn btn-primary mx-2 my-2\" onClick={capitalFirstLetter}>Convert To Capitlized</button> \r\n       <button className=\"btn btn-primary mx-2 my-2\" onClick={Extraspace}>Remove Extra Space</button>\r\n       <button className=\"btn btn-primary mx-2 my-2\" onClick={clearall}>Clear All</button> \r\n       <button className=\"btn btn-primary mx-2 my-2\" onClick={Copyall}>Copy All</button> \r\n        \r\n</div>\r\n<div className=\"container my-2\" style={{color :props.mode==='dark'?'white':'black'}}>\r\n    <h1>Your text Summary</h1>\r\n    <p> {text.split(\" \").length} Words and {text.length} characters</p>\r\n    <p>{0.008 * text.split(\" \").length} Minute to Read</p>\r\n    <h2>Preview</h2>\r\n    <p>{text}</p>\r\n</div>\r\n</>\r\n)\r\n} \r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase(); \r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n      props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n        \r\n</div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React, {useState} from 'react'\r\n\r\nexport default function About() {\r\n\r\n     const [myStyle, setmyStyle] = useState({\r\n      color : 'black',\r\n      backgroundColor : 'white'\r\n    })\r\n     \r\n     const [btntext, setbtntext] = useState(\"Enabe Dark Mode\")\r\n\r\n  const  toggleStyle =() =>{\r\n      if (myStyle.color === 'black') {\r\n        setmyStyle({\r\n          color : 'white',\r\n          backgroundColor:'black',\r\n          border: '1px solid white'\r\n        })\r\n        setbtntext(\"Enable Light Mode\");\r\n      }\r\n      else{\r\n        setmyStyle({\r\n          color : 'black',\r\n          backgroundColor:'white'\r\n      })\r\n      setbtntext(\"Enable Dark Mode\");\r\n    }\r\n  }\r\n\r\n\r\n    return (\r\n        <div className=\"container\" style={myStyle}>\r\n            <h1 className=\"my-2\">About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n      <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\" style={myStyle}>\r\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div className=\"container my-3\">\r\n<button onClick ={toggleStyle} type=\"button\" className=\"btn btn-primary\">{btntext}</button>\r\n</div>\r\n        </div>\r\n    ) \r\n} \r\n","import './App.css';\nimport Navbar from './components/Navbar';  \nimport TextForm from './components/TextForm';  \n// import About from './components/About';  \nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport About from './components/About';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n const showAlert = (message , type) => {\n   setAlert({\n     msg : message,\n     type : type\n   })\n   setTimeout(() => {\n     setAlert(null);\n   }, 1000);\n }\n\n\n\n  const toggleMode = () =>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = \"black\";\n      showAlert(\"done dark mode\" , \"success\")\n      document.title = 'TextConverter - Dark Mode';\n      // setInterval(() => {\n      //   document.title = 'TextConverter'\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = 'DarkMode'\n      // }, 1500);\n    }  \n    else{\n      setMode('light');\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"done light mode\" , \"success\")\n      document.title = 'TextConverter - Light Mode';\n    }\n  }\n  return (\n   <>\n   <Router>\n<Navbar title = \"TextConverter\" mode={mode} toggleMode={toggleMode} />\n{/* <Navbar/> */}\n<Alert alert={alert}/>\n<div className=\"container my-3\">\n<Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n          <TextForm showAlert={showAlert} heading=\"Enter The Text To analyze\" mode={mode} />\n          </Route>\n        </Switch>\n</div> \n</Router>\n   </>\n   \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}